/*
    Latex styles derived from https://github.com/vincentdoerig/latex-css/blob/master/style.css
*/

.theorem, .lemma, .proposition, .algorithm, .example, .problem, .question, .definition, .claim, .claim-un, .conjecture, .hypothesis, .fact, .remark {
    margin: 12px 0;
    padding: 5px 5px 5px 10px;
    display: block;
    color: black
}
/* Theorem-box styles */
.theorem, .lemma, .proposition {
    counter-increment: theorem;
    background-color: #eaf4f7;
    border-left-style: solid;
    border-left-color: darkblue;
}
/* Claim-box styles */
.claim, .algorithm, .conjecture, .hypothesis, .fact {
    counter-increment: theorem;
    font-style: normal;
    background-color: #eaeef7;
    border-left-style: solid;
    border-left-color: darkblue;
}
/* Example-box styles */
.example, .question, .problem {
    counter-increment: theorem;
    font-style: normal;
    background-color: #eef5ec;
    border-left-style: solid;
    border-left-color: darkgreen;
}
/* Definition-box styles */
.definition, .remark {
    counter-increment: theorem;
    font-style: normal;
    background-color: #efecf5;
    border-left-style: solid;
    border-left-color: #483248;
}

.theorem::before {
    content: 'Theorem ' counter(theorem) '. ';
    font-weight: bold;
    font-style: normal;
}
.theorem[text]:before {
    content: 'Theorem ' counter(theorem) ' (' attr(text) "). ";
}
.lemma::before {
    content: 'Lemma ' counter(theorem) '. ';
    font-weight: bold;
    font-style: normal;
}
.lemma[text]:before {
    content: 'Lemma ' counter(theorem) ' (' attr(text) "). ";
}  
.proposition::before {
    content: 'Proposition ' counter(theorem) '. ';
    font-weight: bold;
    font-style: normal;
}
.proposition[text]:before {
    content: 'Proposition ' counter(theorem) ' (' attr(text) "). ";
}  

.algorithm::before {
    content: 'Algorithm ' counter(theorem) '. ';
    font-weight: bold;
    font-style: normal;
}
.algorithm[text]:before {
    content: 'Algorithm ' counter(theorem) ' (' attr(text) "). ";
}  
.claim::before {
    content: 'Claim ' counter(theorem) '. ';
    font-weight: bold;
    font-style: normal;
}
.claim[text]:before {
    content: 'Claim ' counter(theorem) ' (' attr(text) "). ";
}  
.hypothesis::before {
    content: 'Hypothesis ' counter(theorem) '. ';
    font-weight: bold;
    font-style: normal;
}
.hypothesis[text]:before {
    content: 'Hypothesis ' counter(theorem) ' (' attr(text) "). ";
}  
.conjecture::before {
    content: 'Conjecture ' counter(theorem) '. ';
    font-weight: bold;
    font-style: normal;
}
.conjecture[text]:before {
    content: 'Conjecture ' counter(theorem) ' (' attr(text) "). ";
}  
.fact::before {
    content: 'Fact ' counter(theorem) '. ';
    font-weight: bold;
    font-style: normal;
}
.fact[text]:before {
    content: 'Fact ' counter(theorem) ' (' attr(text) "). ";
}  



.example::before {
    content: 'Example ' counter(theorem) '. ';
    font-weight: bold;
    font-style: normal;
}
.example[text]:before {
    content: 'Example ' counter(theorem) ' (' attr(text) "). ";
}  
.question::before {
    content: 'Question ' counter(theorem) '. ';
    font-weight: bold;
    font-style: normal;
}
.question[text]:before {
    content: 'Question ' counter(theorem) ' (' attr(text) "). ";
}  
.problem::before {
    content: 'Problem ' counter(theorem) '. ';
    font-weight: bold;
    font-style: normal;
}
.problem[text]:before {
    content: 'Problem ' counter(theorem) ' (' attr(text) "). ";
}  

.remark::before {
    content: 'Remark ' counter(theorem) '. ';
    font-weight: bold;
    font-style: normal;
}
.remark[text]:before {
    content: 'Remark ' counter(theorem) ' (' attr(text) "). ";
}  

.definition::before {
    content: 'Definition ' counter(theorem) '. ';
    font-weight: bold;
    font-style: normal;
}
.definition[text]:before {
    content: 'Definition ' counter(theorem) ' (' attr(text) "). ";
}


/* Proof */
.proof {
    display: block;
    margin: 12px 0;
    font-style: normal;
    position: relative;
}
.proof::before {
    content: 'Proof. ' attr(text);
    font-style: italic;
}
.proof[text]:before {
    content: attr(text) ". ";
    font-style: italic;
} 
.proof:after {
    content: '◾️';
    position: absolute;
    right: 0px;
    bottom: -2px;
}
  

  
/* Unnumbered Claim */
.claim-un {
    font-style: normal;
    background-color: #eaeef7;
    border-left-style: solid;
    border-left-color: darkblue;
}
.claim-un::before {
    content: 'Claim. ';
    font-weight: bold;
    font-style: normal;
}
.claim-un[text]:before {
    content: 'Claim (' attr(text) "). ";
}  